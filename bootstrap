#!/bin/env python
import subprocess
from pathlib import Path
import os

def setup_git_alias():
    print("configuring: git aliases")
    subprocess.run("""
git config --global alias.co 'checkout'
git config --global alias.st 'status'
git config --global alias.sw 'switch'
git config --global alias.br 'branch'
git config --global alias.ds 'diff --staged'
git config --global alias.fl 'log -u'
git config --global alias.flog 'log --graph --all --decorate'
git config --global alias.lgo1d 'log --graph --all --decorate --oneline --since yesterday'
git config --global alias.lgo3d "log --graph --all --decorate --oneline --since='3 days ago'"
git config --global alias.lgo1w "log --graph --all --decorate --oneline --since='7 days ago'"
git config --global alias.lgo4w "log --graph --all --decorate --oneline --since='4 weeks ago'"
git config --global alias.lgoa 'log --graph --all --decorate --oneline'
git config --global alias.hs "log --pretty='%C(yellow)%h %C(cyan)%ad %Cblue%an%C(auto)%d %Creset%s' --date=relative --date-order --graph"
    """, shell=True)

KNOWN_DOTBASHRC_PATH = Path(os.environ["HOME"]) / ".bashrc"

def patch_dotbashrc():
    print("patching: .bashrc")
    if KNOWN_DOTBASHRC_PATH.exists():
        print(f"found .bashrc at {str(KNOWN_DOTBASHRC_PATH)}")
        lines = []
        with open(KNOWN_DOTBASHRC_PATH, "r") as in_f:
            lines = in_f.readlines()
        
        processed_lines = []
        for line in lines:
            if line.startswith("""    PS1="${userpart} ${lightblue}\\w ${gitbranch}${removeco"""):
                print("found line")
                processed_lines.append('    PS1="${userpart} ${lightblue}\\w ${gitbranch}${removecolor}\n\\$ "\n')
            else:
                processed_lines.append(line)

        with open(KNOWN_DOTBASHRC_PATH, "w") as out_f:
            for l in processed_lines:
                out_f.write(l)


def main():
    setup_git_alias()

    # Only apply the patch if in GitHub Codespaces.
    if not os.environ.get("CODESPACES", None) is None:
        patch_dotbashrc()


if __name__ == "__main__":
    main()
